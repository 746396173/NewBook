package com.thmub.newbook.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.thmub.newbook.bean.BookSourceBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_SOURCE_BEAN".
*/
public class BookSourceBeanDao extends AbstractDao<BookSourceBean, String> {

    public static final String TABLENAME = "BOOK_SOURCE_BEAN";

    /**
     * Properties of entity BookSourceBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RootLink = new Property(0, String.class, "rootLink", true, "ROOT_LINK");
        public final static Property SourceName = new Property(1, String.class, "sourceName", false, "SOURCE_NAME");
        public final static Property EncodeType = new Property(2, String.class, "encodeType", false, "ENCODE_TYPE");
        public final static Property SearchLink = new Property(3, String.class, "searchLink", false, "SEARCH_LINK");
        public final static Property RuleSearchTitle = new Property(4, String.class, "ruleSearchTitle", false, "RULE_SEARCH_TITLE");
        public final static Property RuleSearchAuthor = new Property(5, String.class, "ruleSearchAuthor", false, "RULE_SEARCH_AUTHOR");
        public final static Property RuleSearchDesc = new Property(6, String.class, "ruleSearchDesc", false, "RULE_SEARCH_DESC");
        public final static Property RuleSearchCover = new Property(7, String.class, "ruleSearchCover", false, "RULE_SEARCH_COVER");
        public final static Property RuleSearchLink = new Property(8, String.class, "ruleSearchLink", false, "RULE_SEARCH_LINK");
        public final static Property RuleCatalogTitle = new Property(9, String.class, "ruleCatalogTitle", false, "RULE_CATALOG_TITLE");
        public final static Property RuleCatalogLink = new Property(10, String.class, "ruleCatalogLink", false, "RULE_CATALOG_LINK");
        public final static Property RuleChapterContent = new Property(11, String.class, "ruleChapterContent", false, "RULE_CHAPTER_CONTENT");
        public final static Property OrderNumber = new Property(12, int.class, "orderNumber", false, "ORDER_NUMBER");
        public final static Property Weight = new Property(13, int.class, "weight", false, "WEIGHT");
        public final static Property IsSelected = new Property(14, boolean.class, "isSelected", false, "IS_SELECTED");
    }


    public BookSourceBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BookSourceBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_SOURCE_BEAN\" (" + //
                "\"ROOT_LINK\" TEXT PRIMARY KEY NOT NULL ," + // 0: rootLink
                "\"SOURCE_NAME\" TEXT," + // 1: sourceName
                "\"ENCODE_TYPE\" TEXT," + // 2: encodeType
                "\"SEARCH_LINK\" TEXT," + // 3: searchLink
                "\"RULE_SEARCH_TITLE\" TEXT," + // 4: ruleSearchTitle
                "\"RULE_SEARCH_AUTHOR\" TEXT," + // 5: ruleSearchAuthor
                "\"RULE_SEARCH_DESC\" TEXT," + // 6: ruleSearchDesc
                "\"RULE_SEARCH_COVER\" TEXT," + // 7: ruleSearchCover
                "\"RULE_SEARCH_LINK\" TEXT," + // 8: ruleSearchLink
                "\"RULE_CATALOG_TITLE\" TEXT," + // 9: ruleCatalogTitle
                "\"RULE_CATALOG_LINK\" TEXT," + // 10: ruleCatalogLink
                "\"RULE_CHAPTER_CONTENT\" TEXT," + // 11: ruleChapterContent
                "\"ORDER_NUMBER\" INTEGER NOT NULL ," + // 12: orderNumber
                "\"WEIGHT\" INTEGER NOT NULL ," + // 13: weight
                "\"IS_SELECTED\" INTEGER NOT NULL );"); // 14: isSelected
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_SOURCE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookSourceBean entity) {
        stmt.clearBindings();
 
        String rootLink = entity.getRootLink();
        if (rootLink != null) {
            stmt.bindString(1, rootLink);
        }
 
        String sourceName = entity.getSourceName();
        if (sourceName != null) {
            stmt.bindString(2, sourceName);
        }
 
        String encodeType = entity.getEncodeType();
        if (encodeType != null) {
            stmt.bindString(3, encodeType);
        }
 
        String searchLink = entity.getSearchLink();
        if (searchLink != null) {
            stmt.bindString(4, searchLink);
        }
 
        String ruleSearchTitle = entity.getRuleSearchTitle();
        if (ruleSearchTitle != null) {
            stmt.bindString(5, ruleSearchTitle);
        }
 
        String ruleSearchAuthor = entity.getRuleSearchAuthor();
        if (ruleSearchAuthor != null) {
            stmt.bindString(6, ruleSearchAuthor);
        }
 
        String ruleSearchDesc = entity.getRuleSearchDesc();
        if (ruleSearchDesc != null) {
            stmt.bindString(7, ruleSearchDesc);
        }
 
        String ruleSearchCover = entity.getRuleSearchCover();
        if (ruleSearchCover != null) {
            stmt.bindString(8, ruleSearchCover);
        }
 
        String ruleSearchLink = entity.getRuleSearchLink();
        if (ruleSearchLink != null) {
            stmt.bindString(9, ruleSearchLink);
        }
 
        String ruleCatalogTitle = entity.getRuleCatalogTitle();
        if (ruleCatalogTitle != null) {
            stmt.bindString(10, ruleCatalogTitle);
        }
 
        String ruleCatalogLink = entity.getRuleCatalogLink();
        if (ruleCatalogLink != null) {
            stmt.bindString(11, ruleCatalogLink);
        }
 
        String ruleChapterContent = entity.getRuleChapterContent();
        if (ruleChapterContent != null) {
            stmt.bindString(12, ruleChapterContent);
        }
        stmt.bindLong(13, entity.getOrderNumber());
        stmt.bindLong(14, entity.getWeight());
        stmt.bindLong(15, entity.getIsSelected() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookSourceBean entity) {
        stmt.clearBindings();
 
        String rootLink = entity.getRootLink();
        if (rootLink != null) {
            stmt.bindString(1, rootLink);
        }
 
        String sourceName = entity.getSourceName();
        if (sourceName != null) {
            stmt.bindString(2, sourceName);
        }
 
        String encodeType = entity.getEncodeType();
        if (encodeType != null) {
            stmt.bindString(3, encodeType);
        }
 
        String searchLink = entity.getSearchLink();
        if (searchLink != null) {
            stmt.bindString(4, searchLink);
        }
 
        String ruleSearchTitle = entity.getRuleSearchTitle();
        if (ruleSearchTitle != null) {
            stmt.bindString(5, ruleSearchTitle);
        }
 
        String ruleSearchAuthor = entity.getRuleSearchAuthor();
        if (ruleSearchAuthor != null) {
            stmt.bindString(6, ruleSearchAuthor);
        }
 
        String ruleSearchDesc = entity.getRuleSearchDesc();
        if (ruleSearchDesc != null) {
            stmt.bindString(7, ruleSearchDesc);
        }
 
        String ruleSearchCover = entity.getRuleSearchCover();
        if (ruleSearchCover != null) {
            stmt.bindString(8, ruleSearchCover);
        }
 
        String ruleSearchLink = entity.getRuleSearchLink();
        if (ruleSearchLink != null) {
            stmt.bindString(9, ruleSearchLink);
        }
 
        String ruleCatalogTitle = entity.getRuleCatalogTitle();
        if (ruleCatalogTitle != null) {
            stmt.bindString(10, ruleCatalogTitle);
        }
 
        String ruleCatalogLink = entity.getRuleCatalogLink();
        if (ruleCatalogLink != null) {
            stmt.bindString(11, ruleCatalogLink);
        }
 
        String ruleChapterContent = entity.getRuleChapterContent();
        if (ruleChapterContent != null) {
            stmt.bindString(12, ruleChapterContent);
        }
        stmt.bindLong(13, entity.getOrderNumber());
        stmt.bindLong(14, entity.getWeight());
        stmt.bindLong(15, entity.getIsSelected() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BookSourceBean readEntity(Cursor cursor, int offset) {
        BookSourceBean entity = new BookSourceBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // rootLink
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sourceName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // encodeType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // searchLink
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ruleSearchTitle
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ruleSearchAuthor
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ruleSearchDesc
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ruleSearchCover
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ruleSearchLink
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ruleCatalogTitle
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ruleCatalogLink
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // ruleChapterContent
            cursor.getInt(offset + 12), // orderNumber
            cursor.getInt(offset + 13), // weight
            cursor.getShort(offset + 14) != 0 // isSelected
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookSourceBean entity, int offset) {
        entity.setRootLink(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSourceName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEncodeType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSearchLink(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRuleSearchTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRuleSearchAuthor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRuleSearchDesc(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRuleSearchCover(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRuleSearchLink(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRuleCatalogTitle(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRuleCatalogLink(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRuleChapterContent(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setOrderNumber(cursor.getInt(offset + 12));
        entity.setWeight(cursor.getInt(offset + 13));
        entity.setIsSelected(cursor.getShort(offset + 14) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(BookSourceBean entity, long rowId) {
        return entity.getRootLink();
    }
    
    @Override
    public String getKey(BookSourceBean entity) {
        if(entity != null) {
            return entity.getRootLink();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookSourceBean entity) {
        return entity.getRootLink() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
