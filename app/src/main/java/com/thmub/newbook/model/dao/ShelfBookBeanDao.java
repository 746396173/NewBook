package com.thmub.newbook.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.thmub.newbook.bean.ShelfBookBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHELF_BOOK_BEAN".
*/
public class ShelfBookBeanDao extends AbstractDao<ShelfBookBean, String> {

    public static final String TABLENAME = "SHELF_BOOK_BEAN";

    /**
     * Properties of entity ShelfBookBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Link = new Property(0, String.class, "link", true, "LINK");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Author = new Property(2, String.class, "author", false, "AUTHOR");
        public final static Property Desc = new Property(3, String.class, "desc", false, "DESC");
        public final static Property Cover = new Property(4, String.class, "cover", false, "COVER");
        public final static Property CatalogLink = new Property(5, String.class, "catalogLink", false, "CATALOG_LINK");
        public final static Property FindLink = new Property(6, String.class, "findLink", false, "FIND_LINK");
        public final static Property SourceTag = new Property(7, String.class, "sourceTag", false, "SOURCE_TAG");
        public final static Property LatestChapter = new Property(8, String.class, "latestChapter", false, "LATEST_CHAPTER");
        public final static Property ChapterCount = new Property(9, int.class, "chapterCount", false, "CHAPTER_COUNT");
        public final static Property Updated = new Property(10, String.class, "updated", false, "UPDATED");
        public final static Property LastRead = new Property(11, String.class, "lastRead", false, "LAST_READ");
        public final static Property CurChapterTitle = new Property(12, String.class, "curChapterTitle", false, "CUR_CHAPTER_TITLE");
        public final static Property CurChapter = new Property(13, Integer.class, "curChapter", false, "CUR_CHAPTER");
        public final static Property CurChapterPage = new Property(14, Integer.class, "curChapterPage", false, "CUR_CHAPTER_PAGE");
        public final static Property IsUpdate = new Property(15, boolean.class, "isUpdate", false, "IS_UPDATE");
        public final static Property IsLocal = new Property(16, boolean.class, "isLocal", false, "IS_LOCAL");
    }

    private DaoSession daoSession;


    public ShelfBookBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ShelfBookBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHELF_BOOK_BEAN\" (" + //
                "\"LINK\" TEXT PRIMARY KEY NOT NULL ," + // 0: link
                "\"TITLE\" TEXT," + // 1: title
                "\"AUTHOR\" TEXT," + // 2: author
                "\"DESC\" TEXT," + // 3: desc
                "\"COVER\" TEXT," + // 4: cover
                "\"CATALOG_LINK\" TEXT," + // 5: catalogLink
                "\"FIND_LINK\" TEXT," + // 6: findLink
                "\"SOURCE_TAG\" TEXT," + // 7: sourceTag
                "\"LATEST_CHAPTER\" TEXT," + // 8: latestChapter
                "\"CHAPTER_COUNT\" INTEGER NOT NULL ," + // 9: chapterCount
                "\"UPDATED\" TEXT," + // 10: updated
                "\"LAST_READ\" TEXT," + // 11: lastRead
                "\"CUR_CHAPTER_TITLE\" TEXT," + // 12: curChapterTitle
                "\"CUR_CHAPTER\" INTEGER," + // 13: curChapter
                "\"CUR_CHAPTER_PAGE\" INTEGER," + // 14: curChapterPage
                "\"IS_UPDATE\" INTEGER NOT NULL ," + // 15: isUpdate
                "\"IS_LOCAL\" INTEGER NOT NULL );"); // 16: isLocal
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHELF_BOOK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShelfBookBean entity) {
        stmt.clearBindings();
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(1, link);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(3, author);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(4, desc);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(5, cover);
        }
 
        String catalogLink = entity.getCatalogLink();
        if (catalogLink != null) {
            stmt.bindString(6, catalogLink);
        }
 
        String findLink = entity.getFindLink();
        if (findLink != null) {
            stmt.bindString(7, findLink);
        }
 
        String sourceTag = entity.getSourceTag();
        if (sourceTag != null) {
            stmt.bindString(8, sourceTag);
        }
 
        String latestChapter = entity.getLatestChapter();
        if (latestChapter != null) {
            stmt.bindString(9, latestChapter);
        }
        stmt.bindLong(10, entity.getChapterCount());
 
        String updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindString(11, updated);
        }
 
        String lastRead = entity.getLastRead();
        if (lastRead != null) {
            stmt.bindString(12, lastRead);
        }
 
        String curChapterTitle = entity.getCurChapterTitle();
        if (curChapterTitle != null) {
            stmt.bindString(13, curChapterTitle);
        }
 
        Integer curChapter = entity.getCurChapter();
        if (curChapter != null) {
            stmt.bindLong(14, curChapter);
        }
 
        Integer curChapterPage = entity.getCurChapterPage();
        if (curChapterPage != null) {
            stmt.bindLong(15, curChapterPage);
        }
        stmt.bindLong(16, entity.getIsUpdate() ? 1L: 0L);
        stmt.bindLong(17, entity.getIsLocal() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShelfBookBean entity) {
        stmt.clearBindings();
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(1, link);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(3, author);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(4, desc);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(5, cover);
        }
 
        String catalogLink = entity.getCatalogLink();
        if (catalogLink != null) {
            stmt.bindString(6, catalogLink);
        }
 
        String findLink = entity.getFindLink();
        if (findLink != null) {
            stmt.bindString(7, findLink);
        }
 
        String sourceTag = entity.getSourceTag();
        if (sourceTag != null) {
            stmt.bindString(8, sourceTag);
        }
 
        String latestChapter = entity.getLatestChapter();
        if (latestChapter != null) {
            stmt.bindString(9, latestChapter);
        }
        stmt.bindLong(10, entity.getChapterCount());
 
        String updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindString(11, updated);
        }
 
        String lastRead = entity.getLastRead();
        if (lastRead != null) {
            stmt.bindString(12, lastRead);
        }
 
        String curChapterTitle = entity.getCurChapterTitle();
        if (curChapterTitle != null) {
            stmt.bindString(13, curChapterTitle);
        }
 
        Integer curChapter = entity.getCurChapter();
        if (curChapter != null) {
            stmt.bindLong(14, curChapter);
        }
 
        Integer curChapterPage = entity.getCurChapterPage();
        if (curChapterPage != null) {
            stmt.bindLong(15, curChapterPage);
        }
        stmt.bindLong(16, entity.getIsUpdate() ? 1L: 0L);
        stmt.bindLong(17, entity.getIsLocal() ? 1L: 0L);
    }

    @Override
    protected final void attachEntity(ShelfBookBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ShelfBookBean readEntity(Cursor cursor, int offset) {
        ShelfBookBean entity = new ShelfBookBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // link
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // author
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // desc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cover
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // catalogLink
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // findLink
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sourceTag
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // latestChapter
            cursor.getInt(offset + 9), // chapterCount
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // updated
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // lastRead
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // curChapterTitle
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // curChapter
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // curChapterPage
            cursor.getShort(offset + 15) != 0, // isUpdate
            cursor.getShort(offset + 16) != 0 // isLocal
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShelfBookBean entity, int offset) {
        entity.setLink(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAuthor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDesc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCover(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCatalogLink(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFindLink(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSourceTag(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLatestChapter(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setChapterCount(cursor.getInt(offset + 9));
        entity.setUpdated(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLastRead(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCurChapterTitle(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCurChapter(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setCurChapterPage(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setIsUpdate(cursor.getShort(offset + 15) != 0);
        entity.setIsLocal(cursor.getShort(offset + 16) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(ShelfBookBean entity, long rowId) {
        return entity.getLink();
    }
    
    @Override
    public String getKey(ShelfBookBean entity) {
        if(entity != null) {
            return entity.getLink();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShelfBookBean entity) {
        return entity.getLink() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
