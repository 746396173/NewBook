package com.thmub.newbook.model.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.thmub.newbook.bean.BookChapterBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_CHAPTER_BEAN".
*/
public class BookChapterBeanDao extends AbstractDao<BookChapterBean, String> {

    public static final String TABLENAME = "BOOK_CHAPTER_BEAN";

    /**
     * Properties of entity BookChapterBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BookLink = new Property(0, String.class, "bookLink", false, "BOOK_LINK");
        public final static Property BookTitle = new Property(1, String.class, "bookTitle", false, "BOOK_TITLE");
        public final static Property Tag = new Property(2, String.class, "tag", false, "TAG");
        public final static Property ChapterLink = new Property(3, String.class, "chapterLink", true, "CHAPTER_LINK");
        public final static Property ChapterTitle = new Property(4, String.class, "chapterTitle", false, "CHAPTER_TITLE");
        public final static Property ChapterIndex = new Property(5, int.class, "chapterIndex", false, "CHAPTER_INDEX");
        public final static Property Start = new Property(6, Long.class, "start", false, "START");
        public final static Property End = new Property(7, Long.class, "end", false, "END");
        public final static Property Unreadble = new Property(8, boolean.class, "unreadble", false, "UNREADBLE");
    }

    private Query<BookChapterBean> shelfBookBean_BookChapterListQuery;

    public BookChapterBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BookChapterBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_CHAPTER_BEAN\" (" + //
                "\"BOOK_LINK\" TEXT," + // 0: bookLink
                "\"BOOK_TITLE\" TEXT," + // 1: bookTitle
                "\"TAG\" TEXT," + // 2: tag
                "\"CHAPTER_LINK\" TEXT PRIMARY KEY NOT NULL ," + // 3: chapterLink
                "\"CHAPTER_TITLE\" TEXT," + // 4: chapterTitle
                "\"CHAPTER_INDEX\" INTEGER NOT NULL ," + // 5: chapterIndex
                "\"START\" INTEGER," + // 6: start
                "\"END\" INTEGER," + // 7: end
                "\"UNREADBLE\" INTEGER NOT NULL );"); // 8: unreadble
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_BOOK_CHAPTER_BEAN_BOOK_LINK ON BOOK_CHAPTER_BEAN" +
                " (\"BOOK_LINK\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_CHAPTER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookChapterBean entity) {
        stmt.clearBindings();
 
        String bookLink = entity.getBookLink();
        if (bookLink != null) {
            stmt.bindString(1, bookLink);
        }
 
        String bookTitle = entity.getBookTitle();
        if (bookTitle != null) {
            stmt.bindString(2, bookTitle);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(3, tag);
        }
 
        String chapterLink = entity.getChapterLink();
        if (chapterLink != null) {
            stmt.bindString(4, chapterLink);
        }
 
        String chapterTitle = entity.getChapterTitle();
        if (chapterTitle != null) {
            stmt.bindString(5, chapterTitle);
        }
        stmt.bindLong(6, entity.getChapterIndex());
 
        Long start = entity.getStart();
        if (start != null) {
            stmt.bindLong(7, start);
        }
 
        Long end = entity.getEnd();
        if (end != null) {
            stmt.bindLong(8, end);
        }
        stmt.bindLong(9, entity.getUnreadble() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookChapterBean entity) {
        stmt.clearBindings();
 
        String bookLink = entity.getBookLink();
        if (bookLink != null) {
            stmt.bindString(1, bookLink);
        }
 
        String bookTitle = entity.getBookTitle();
        if (bookTitle != null) {
            stmt.bindString(2, bookTitle);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(3, tag);
        }
 
        String chapterLink = entity.getChapterLink();
        if (chapterLink != null) {
            stmt.bindString(4, chapterLink);
        }
 
        String chapterTitle = entity.getChapterTitle();
        if (chapterTitle != null) {
            stmt.bindString(5, chapterTitle);
        }
        stmt.bindLong(6, entity.getChapterIndex());
 
        Long start = entity.getStart();
        if (start != null) {
            stmt.bindLong(7, start);
        }
 
        Long end = entity.getEnd();
        if (end != null) {
            stmt.bindLong(8, end);
        }
        stmt.bindLong(9, entity.getUnreadble() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3);
    }    

    @Override
    public BookChapterBean readEntity(Cursor cursor, int offset) {
        BookChapterBean entity = new BookChapterBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // bookLink
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookTitle
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tag
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // chapterLink
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // chapterTitle
            cursor.getInt(offset + 5), // chapterIndex
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // start
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // end
            cursor.getShort(offset + 8) != 0 // unreadble
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookChapterBean entity, int offset) {
        entity.setBookLink(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBookTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTag(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setChapterLink(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setChapterTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setChapterIndex(cursor.getInt(offset + 5));
        entity.setStart(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setEnd(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setUnreadble(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(BookChapterBean entity, long rowId) {
        return entity.getChapterLink();
    }
    
    @Override
    public String getKey(BookChapterBean entity) {
        if(entity != null) {
            return entity.getChapterLink();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookChapterBean entity) {
        return entity.getChapterLink() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "bookChapterList" to-many relationship of ShelfBookBean. */
    public List<BookChapterBean> _queryShelfBookBean_BookChapterList(String bookLink) {
        synchronized (this) {
            if (shelfBookBean_BookChapterListQuery == null) {
                QueryBuilder<BookChapterBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BookLink.eq(null));
                shelfBookBean_BookChapterListQuery = queryBuilder.build();
            }
        }
        Query<BookChapterBean> query = shelfBookBean_BookChapterListQuery.forCurrentThread();
        query.setParameter(0, bookLink);
        return query.list();
    }

}
